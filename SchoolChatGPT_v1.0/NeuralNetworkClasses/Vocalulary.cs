using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace SchoolChatGPT_v1._0.NeuralNetworkClasses
{
    public static class Vocalulary
    {
        private static Dictionary<string, int> vocabulary = new Dictionary<string, int>()
            {
            {"Что",1 }
              /*  {"Как", 1},
                {"Зачем", 1},
                {"Почему", 1},
                {"Где", 1},
                {"Когда", 1},
                {"Что", 1},
                {"Кто", 1},
                {"как", 1},
                {"зачем", 1},
                {"почему", 1},
                {"где", 1},
                {"когда", 1},
                {"что", 1},
                {"кто", 1},

                {"работает", 2},
                {"работать", 2},
                {"работают", 2},
                {"работа", 2},
                {"работой", 2},
                {"работу", 2},

                {"теорема_Пифагора", 3},
                {"формула квадратного уравнения", 3},
                {"матрица", 3},

                {"интегрирование", 3},
                {"треугольник", 3},
                {"окружность", 3},
                {"гипотенуза", 3},
                {"синус", 3},
                {"косинус", 3},
                {"тангенс", 3},
                {"логарифм", 3},
                {"Сколько", 4},
    {"сколько", 4},
    {"Скольких", 4},
    {"скольких", 4},
    {"Скольким", 4},
    {"скольким", 4},
    {"Сколькие", 4},
    {"сколькие", 4},
    {"Сколький", 4},
    {"сколький", 4},
    {"Сколькими", 4},
    {"сколькими", 4},
    {"Сколькая", 4},
    {"сколькая", 4},

    {"Реши", 4},
    {"реши", 4},
    {"Решите", 4},
    {"решите", 4},
    {"Решения", 4},
    {"решения", 4},
    {"Решению", 4},
    {"решению", 4},
    {"Решении", 4},
    {"решении", 4},
    {"Решением", 4},
    {"решением", 4},
    {"Решенная", 4},
    {"решенная", 4},
    {"Решенное", 4},
    {"решенное", 4},
    {"Решенные", 4},
    {"решенные", 4},
    {"Решенный", 4},
    {"решенный", 4},
    {"Решенными", 4},
    {"решенными", 4},
    {"Решенной", 4},
    {"решенной", 4},
    {"Решенных", 4},
    {"решенных", 4},
     {"Найдите", 4},
      {"найдите", 4},
    {"Посчитай", 4},
    {"посчитай", 4},
    {"Посчитайте", 4},
    {"посчитайте", 4},
    {"Подсчитай", 4},
    {"подсчитай", 4},
    {"Подсчитайте", 4},
    {"подсчитайте", 4},
    {"Подсчёт", 4},
    {"подсчёт", 4},
    {"Подсчёте", 4},
    {"подсчёте", 4},
    {"Подсчёта", 4},
    {"подсчёта", 4},

          {"+",5 },
          {"-",5 },
          {"*",5 },
          {"/",5 },
          {"=",5 },
          {"Пусть", 6},
          {"пусть", 6},
        {"вероятность", 6},
    {"Вероятность", 6},

    {"Представьте", 6},
    {"п1редставьте", 6},*/
            };

        private static string[] mathQuestionsAndProblems = new string[]
{
};

        private static List<Tuple<double, double[]>> trainingData = new List<Tuple<double, double[]>>()
        {
        };

        public static List<Tuple<double, double[]>> TrainingData
        { get { return trainingData; } }

        public static void Learning()
        {
            {
                var words = mathQuestionsAndProblems[0].Split(' ');
                var vector = new double[60];
                for (int i = 0; i < vector.Length; i++)
                {
                    vector[i] = 0;
                }
                for (int i = 0; i < 3; i++)
                {
                    for (int j = i; j < words.Length; j++)
                    {
                        if (vocabulary.ContainsKey(words[j]))
                        {
                            var num = vocabulary[words[j]];
                            vector[num - 1] = 1.0;
                        }
                    }
                }
                bool a = false;

                for (int i = 0; i < trainingData.Count; i++)
                {
                    if (vector == trainingData[i].Item2) a = true;
                }
                if (!a)
                {
                    var input = double.Parse(Console.ReadLine());
                    trainingData.Add(new Tuple<double, double[]>(input, vector));
                }
            }
        }

        public static void SetWords()
        {
            Data data1 = new Data(vocabulary, trainingData);
            //  data1.SetData();
            data1 = data1.GetData();
            vocabulary = data1.wordsData;
            string[] mathRulesAndDefinitions = new string[]
{
    "Почему при умножении двух отрицательных чисел получается положительное число?",
    "Как работает правило ассоциативности в алгебре?",
    "Зачем вводится константа π (пи) в геометрии и математике?",
    "Почему дроби не могут иметь нулевой знаменатель?",
    "Какие правила сравнения используются при сравнении дробей?",
    "Что такое правило симметрии в математике и физике?",
    "Почему в уравнениях могут присутствовать мнимые числа?",
    "Какие правила десятичной системы счисления делают ее такой удобной?",
    "Почему в правилах дифференцирования вычитание из функции равносильно умножению на -1?",
    "Каким образом доказывается теорема Пифагора?",
    "Зачем вводятся математические символы и обозначения?",
    "Какие правила сокращения существуют при решении уравнений?",
    "Почему при вычислении интегралов используется предел сумм?",
    "Как работают правила вычисления вероятности в теории вероятности?",
    "Что такое принцип математической индукции и как им пользуются?",
    "Почему правила алгебры справедливы для комплексных чисел?",
    "Какие правила логики используются при доказательствах в математике?",
    "Почему правило Лопиталя применяется при вычислении пределов?",
    "Зачем вводятся бесконечно малые и бесконечно большие числа в анализе?",
    "Какие правила используются при работе с матрицами и линейными операторами?",
     "Что такое теорема Пифагора?",
    "Как определить площадь треугольника по формуле?",
    "Что такое квадрат числа?",
    "Как называется операция умножения числа на само себя?",
    "Что означает термин 'корень квадратный'?",
    "Как найти среднее арифметическое чисел?",
    "Что такое геометрическая прогрессия?",
    "Как рассчитать периметр круга?",
    "Что такое объем куба?",
    "Как вычислить длину окружности по радиусу?",
    "Что означает понятие 'процент'?",
    "Какой процент от числа составляет другое число?",
    "Что такое абсолютная величина числа?",
    "Какие операции с числами считаются обратными?",
    "Что означает 'сумма двух чисел равна 10'?",
    "Какой математический символ обозначает умножение?",
    "Что такое равенство в математике?",
    "Как выразить десятичную дробь в виде процента?",
    "Что такое линейное уравнение?",
    "Какие действия считаются обратимыми в математике?"
};
            for (int i = 0; i < mathRulesAndDefinitions.Length; i++)
            {
                mathRulesAndDefinitions[i] = RemovePunctuation(mathRulesAndDefinitions[i]);
            }
            for (int i = 0; i < mathRulesAndDefinitions.Length; i++)
            {
                var inputText = mathRulesAndDefinitions[i].Split();
                for (int j = 0; j < vocabulary.Count; j++)
                {
                    for (int x = 0; x < inputText.Length; x++)
                    {
                        if (!vocabulary.ContainsKey(inputText[x]))
                        {
                            if (inputText[x].Length > 1)
                                vocabulary.Add(inputText[x], vocabulary.Count + 1);
                        }
                    }
                }
            }
            Data data = new Data(Vocabulary, trainingData);
          //  data.SetData();
        }

        private static string RemovePunctuation(string input)
        {
            // Используем регулярное выражение для удаления знаков препинания
            return Regex.Replace(input, @"[\p{P}-[.]]", string.Empty);
        }

        public static Dictionary<string, int> Vocabulary
        { get { return vocabulary; } }
    }
}